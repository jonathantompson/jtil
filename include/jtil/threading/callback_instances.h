// This file was generated by 'callback.py'.
// Do not hand-edit anything here.

#pragma once

namespace jtil {
namespace threading {

template<typename Res, typename Args1=void, typename Args2=void, typename Args3=void, typename Args4=void, typename Args5=void, typename Args6=void, typename Args7=void, typename Args8=void, typename Args9=void>
class Callback;

template<typename Res>
class Callback<Res> {
public:
  virtual ~Callback() {}

  virtual Res operator()() = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1>
class Callback<Res,Arg1> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2>
class Callback<Res,Arg1,Arg2> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3>
class Callback<Res,Arg1,Arg2,Arg3> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3,typename Arg4>
class Callback<Res,Arg1,Arg2,Arg3,Arg4> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3,Arg4) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3,typename Arg4,typename Arg5>
class Callback<Res,Arg1,Arg2,Arg3,Arg4,Arg5> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3,Arg4,Arg5) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3,typename Arg4,typename Arg5,typename Arg6>
class Callback<Res,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3,Arg4,Arg5,Arg6) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3,typename Arg4,typename Arg5,typename Arg6,typename Arg7>
class Callback<Res,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7) = 0;
  virtual bool once() const = 0;
};

template<typename Res,typename Arg1,typename Arg2,typename Arg3,typename Arg4,typename Arg5,typename Arg6,typename Arg7,typename Arg8>
class Callback<Res,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8> {
public:
  virtual ~Callback() {}

  virtual Res operator()(Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8) = 0;
  virtual bool once() const = 0;
};

template<typename Target, typename Res>
class CallableOnce_0_0 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)();

  CallableOnce_0_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_0_0() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)();
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target>
class CallableOnce_0_0<Target, void> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)();

  CallableOnce_0_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_0_0() {}

  virtual void operator()() {
    ((*obj_).*target_func_)();
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res>
CallableOnce_0_0<Target, Res>*
MakeCallableOnce(
    Res (Target::*f)(),
    Target* obj) {
  return new CallableOnce_0_0<Target,Res>(
    f,
    obj);
}

template<typename Target, typename Res>
class CallableMany_0_0 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)();

  CallableMany_0_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_0_0() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)();
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res>
CallableMany_0_0<Target, Res>*
MakeCallableMany(
    Res (Target::*f)(),
    Target* obj) {
  return new CallableMany_0_0<Target,Res>(
    f,
    obj);
}
template<typename Target, typename Res, typename Arg1>
class CallableOnce_1_0 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Arg1);

  CallableOnce_1_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_1_0() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1>
class CallableOnce_1_0<Target, void, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Arg1);

  CallableOnce_1_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_1_0() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1>
CallableOnce_1_0<Target, Res, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Arg1),
    Target* obj) {
  return new CallableOnce_1_0<Target,Res, Arg1>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1>
class CallableMany_1_0 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Arg1);

  CallableMany_1_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_1_0() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1>
CallableMany_1_0<Target, Res, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Arg1),
    Target* obj) {
  return new CallableMany_1_0<Target,Res, Arg1>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1>
class CallableOnce_1_1 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1);

  CallableOnce_1_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_1_1() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1>
class CallableOnce_1_1<Target, void, Bind1> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1);

  CallableOnce_1_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_1_1() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1>
CallableOnce_1_1<Target, Res, Bind1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_1_1<Target,Res, Bind1>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1>
class CallableMany_1_1 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1);

  CallableMany_1_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_1_1() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1>
CallableMany_1_1<Target, Res, Bind1>*
MakeCallableMany(
    Res (Target::*f)(Bind1),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_1_1<Target,Res, Bind1>(
    f,
    obj,
    bind1);
}
template<typename Target, typename Res, typename Arg1, typename Arg2>
class CallableOnce_2_0 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2);

  CallableOnce_2_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_2_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2>
class CallableOnce_2_0<Target, void, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2);

  CallableOnce_2_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_2_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2>
CallableOnce_2_0<Target, Res, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2),
    Target* obj) {
  return new CallableOnce_2_0<Target,Res, Arg1, Arg2>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2>
class CallableMany_2_0 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2);

  CallableMany_2_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_2_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2>
CallableMany_2_0<Target, Res, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2),
    Target* obj) {
  return new CallableMany_2_0<Target,Res, Arg1, Arg2>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1>
class CallableOnce_2_1 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1);

  CallableOnce_2_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_2_1() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1>
class CallableOnce_2_1<Target, void, Bind1, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1);

  CallableOnce_2_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_2_1() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1>
CallableOnce_2_1<Target, Res, Bind1, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_2_1<Target,Res, Bind1, Arg1>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1>
class CallableMany_2_1 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1);

  CallableMany_2_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_2_1() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1>
CallableMany_2_1<Target, Res, Bind1, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_2_1<Target,Res, Bind1, Arg1>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2>
class CallableOnce_2_2 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2);

  CallableOnce_2_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_2_2() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2>
class CallableOnce_2_2<Target, void, Bind1, Bind2> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2);

  CallableOnce_2_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_2_2() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2>
CallableOnce_2_2<Target, Res, Bind1, Bind2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_2_2<Target,Res, Bind1, Bind2>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2>
class CallableMany_2_2 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2);

  CallableMany_2_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_2_2() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2>
CallableMany_2_2<Target, Res, Bind1, Bind2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_2_2<Target,Res, Bind1, Bind2>(
    f,
    obj,
    bind1,
    bind2);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_3_0 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3);

  CallableOnce_3_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_3_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_3_0<Target, void, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3);

  CallableOnce_3_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_3_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_3_0<Target, Res, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3),
    Target* obj) {
  return new CallableOnce_3_0<Target,Res, Arg1, Arg2, Arg3>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_3_0 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3);

  CallableMany_3_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_3_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3>
CallableMany_3_0<Target, Res, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3),
    Target* obj) {
  return new CallableMany_3_0<Target,Res, Arg1, Arg2, Arg3>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2>
class CallableOnce_3_1 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2);

  CallableOnce_3_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_3_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2>
class CallableOnce_3_1<Target, void, Bind1, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2);

  CallableOnce_3_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_3_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2>
CallableOnce_3_1<Target, Res, Bind1, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_3_1<Target,Res, Bind1, Arg1, Arg2>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2>
class CallableMany_3_1 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2);

  CallableMany_3_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_3_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2>
CallableMany_3_1<Target, Res, Bind1, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_3_1<Target,Res, Bind1, Arg1, Arg2>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1>
class CallableOnce_3_2 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1);

  CallableOnce_3_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_3_2() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1>
class CallableOnce_3_2<Target, void, Bind1, Bind2, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1);

  CallableOnce_3_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_3_2() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1>
CallableOnce_3_2<Target, Res, Bind1, Bind2, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_3_2<Target,Res, Bind1, Bind2, Arg1>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1>
class CallableMany_3_2 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1);

  CallableMany_3_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_3_2() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1>
CallableMany_3_2<Target, Res, Bind1, Bind2, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_3_2<Target,Res, Bind1, Bind2, Arg1>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3>
class CallableOnce_3_3 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3);

  CallableOnce_3_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_3_3() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3>
class CallableOnce_3_3<Target, void, Bind1, Bind2, Bind3> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3);

  CallableOnce_3_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_3_3() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3>
CallableOnce_3_3<Target, Res, Bind1, Bind2, Bind3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_3_3<Target,Res, Bind1, Bind2, Bind3>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3>
class CallableMany_3_3 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3);

  CallableMany_3_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_3_3() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3>
CallableMany_3_3<Target, Res, Bind1, Bind2, Bind3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_3_3<Target,Res, Bind1, Bind2, Bind3>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_4_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4);

  CallableOnce_4_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_4_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3, arg4);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_4_0<Target, void, Arg1, Arg2, Arg3, Arg4> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4);

  CallableOnce_4_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_4_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    ((*obj_).*target_func_)(arg1, arg2, arg3, arg4);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableOnce_4_0<Target, Res, Arg1, Arg2, Arg3, Arg4>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4),
    Target* obj) {
  return new CallableOnce_4_0<Target,Res, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableMany_4_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4);

  CallableMany_4_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_4_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3, arg4);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableMany_4_0<Target, Res, Arg1, Arg2, Arg3, Arg4>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4),
    Target* obj) {
  return new CallableMany_4_0<Target,Res, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_4_1 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3);

  CallableOnce_4_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_4_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_4_1<Target, void, Bind1, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3);

  CallableOnce_4_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_4_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_4_1<Target, Res, Bind1, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_4_1<Target,Res, Bind1, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_4_1 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3);

  CallableMany_4_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_4_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3>
CallableMany_4_1<Target, Res, Bind1, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_4_1<Target,Res, Bind1, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2>
class CallableOnce_4_2 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2);

  CallableOnce_4_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_4_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1, typename Arg2>
class CallableOnce_4_2<Target, void, Bind1, Bind2, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2);

  CallableOnce_4_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_4_2() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2>
CallableOnce_4_2<Target, Res, Bind1, Bind2, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_4_2<Target,Res, Bind1, Bind2, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2>
class CallableMany_4_2 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2);

  CallableMany_4_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_4_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2>
CallableMany_4_2<Target, Res, Bind1, Bind2, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_4_2<Target,Res, Bind1, Bind2, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1>
class CallableOnce_4_3 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1);

  CallableOnce_4_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_4_3() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Arg1>
class CallableOnce_4_3<Target, void, Bind1, Bind2, Bind3, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1);

  CallableOnce_4_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_4_3() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1>
CallableOnce_4_3<Target, Res, Bind1, Bind2, Bind3, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_4_3<Target,Res, Bind1, Bind2, Bind3, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1>
class CallableMany_4_3 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1);

  CallableMany_4_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_4_3() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1>
CallableMany_4_3<Target, Res, Bind1, Bind2, Bind3, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_4_3<Target,Res, Bind1, Bind2, Bind3, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4>
class CallableOnce_4_4 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4);

  CallableOnce_4_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_4_4() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4>
class CallableOnce_4_4<Target, void, Bind1, Bind2, Bind3, Bind4> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4);

  CallableOnce_4_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_4_4() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4>
CallableOnce_4_4<Target, Res, Bind1, Bind2, Bind3, Bind4>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableOnce_4_4<Target,Res, Bind1, Bind2, Bind3, Bind4>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4>
class CallableMany_4_4 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4);

  CallableMany_4_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableMany_4_4() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4>
CallableMany_4_4<Target, Res, Bind1, Bind2, Bind3, Bind4>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableMany_4_4<Target,Res, Bind1, Bind2, Bind3, Bind4>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_5_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_5_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_5_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_5_0<Target, void, Arg1, Arg2, Arg3, Arg4, Arg5> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_5_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_5_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableOnce_5_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj) {
  return new CallableOnce_5_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableMany_5_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableMany_5_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_5_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableMany_5_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj) {
  return new CallableMany_5_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_5_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_5_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_5_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_5_1<Target, void, Bind1, Arg1, Arg2, Arg3, Arg4> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_5_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_5_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableOnce_5_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_5_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableMany_5_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4);

  CallableMany_5_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_5_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableMany_5_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_5_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_5_2 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3);

  CallableOnce_5_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_5_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_5_2<Target, void, Bind1, Bind2, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3);

  CallableOnce_5_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_5_2() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_5_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_5_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_5_2 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3);

  CallableMany_5_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_5_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3>
CallableMany_5_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_5_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2>
class CallableOnce_5_3 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2);

  CallableOnce_5_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_5_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2>
class CallableOnce_5_3<Target, void, Bind1, Bind2, Bind3, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2);

  CallableOnce_5_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_5_3() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2>
CallableOnce_5_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_5_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2>
class CallableMany_5_3 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2);

  CallableMany_5_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_5_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2>
CallableMany_5_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_5_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1>
class CallableOnce_5_4 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1);

  CallableOnce_5_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_5_4() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1>
class CallableOnce_5_4<Target, void, Bind1, Bind2, Bind3, Bind4, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1);

  CallableOnce_5_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_5_4() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1>
CallableOnce_5_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableOnce_5_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1>
class CallableMany_5_4 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1);

  CallableMany_5_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableMany_5_4() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1>
CallableMany_5_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableMany_5_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5>
class CallableOnce_5_5 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5);

  CallableOnce_5_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_5_5() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5>
class CallableOnce_5_5<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5);

  CallableOnce_5_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_5_5() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5>
CallableOnce_5_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableOnce_5_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5>
class CallableMany_5_5 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5);

  CallableMany_5_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableMany_5_5() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5>
CallableMany_5_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableMany_5_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_6_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_6_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_6_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_6_0<Target, void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_6_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_6_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableOnce_6_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj) {
  return new CallableOnce_6_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableMany_6_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableMany_6_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_6_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableMany_6_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj) {
  return new CallableMany_6_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_6_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_6_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_6_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_6_1<Target, void, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_6_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_6_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableOnce_6_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_6_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableMany_6_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableMany_6_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_6_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableMany_6_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_6_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_6_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_6_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_6_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_6_2<Target, void, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_6_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_6_2() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableOnce_6_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_6_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableMany_6_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4);

  CallableMany_6_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_6_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableMany_6_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_6_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_6_3 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3);

  CallableOnce_6_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_6_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_6_3<Target, void, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3);

  CallableOnce_6_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_6_3() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_6_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_6_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_6_3 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3);

  CallableMany_6_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_6_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3>
CallableMany_6_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_6_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2>
class CallableOnce_6_4 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2);

  CallableOnce_6_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_6_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2>
class CallableOnce_6_4<Target, void, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2);

  CallableOnce_6_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_6_4() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2>
CallableOnce_6_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableOnce_6_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2>
class CallableMany_6_4 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2);

  CallableMany_6_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableMany_6_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2>
CallableMany_6_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableMany_6_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1>
class CallableOnce_6_5 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1);

  CallableOnce_6_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_6_5() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1>
class CallableOnce_6_5<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1);

  CallableOnce_6_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_6_5() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1>
CallableOnce_6_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableOnce_6_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1>
class CallableMany_6_5 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1);

  CallableMany_6_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableMany_6_5() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1>
CallableMany_6_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableMany_6_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6>
class CallableOnce_6_6 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6);

  CallableOnce_6_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_6_6() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6>
class CallableOnce_6_6<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6);

  CallableOnce_6_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_6_6() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6>
CallableOnce_6_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableOnce_6_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6>
class CallableMany_6_6 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6);

  CallableMany_6_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableMany_6_6() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6>
CallableMany_6_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableMany_6_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableOnce_7_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableOnce_7_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_7_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableOnce_7_0<Target, void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableOnce_7_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_7_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
CallableOnce_7_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7),
    Target* obj) {
  return new CallableOnce_7_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableMany_7_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableMany_7_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_7_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
CallableMany_7_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7),
    Target* obj) {
  return new CallableMany_7_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_7_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_7_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_7_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_7_1<Target, void, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_7_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_7_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableOnce_7_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_7_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableMany_7_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableMany_7_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_7_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableMany_7_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_7_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_7_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_7_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_7_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_7_2<Target, void, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_7_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_7_2() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableOnce_7_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_7_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableMany_7_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableMany_7_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_7_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableMany_7_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_7_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_7_3 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_7_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_7_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_7_3<Target, void, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_7_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_7_3() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableOnce_7_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_7_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableMany_7_3 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4);

  CallableMany_7_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_7_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableMany_7_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_7_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_7_4 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3);

  CallableOnce_7_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_7_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_7_4<Target, void, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3);

  CallableOnce_7_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_7_4() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_7_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableOnce_7_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_7_4 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3);

  CallableMany_7_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableMany_7_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3>
CallableMany_7_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableMany_7_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2>
class CallableOnce_7_5 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2);

  CallableOnce_7_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_7_5() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2>
class CallableOnce_7_5<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2);

  CallableOnce_7_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_7_5() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2>
CallableOnce_7_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableOnce_7_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2>
class CallableMany_7_5 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2);

  CallableMany_7_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableMany_7_5() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2>
CallableMany_7_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableMany_7_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1>
class CallableOnce_7_6 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1);

  CallableOnce_7_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_7_6() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1>
class CallableOnce_7_6<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1);

  CallableOnce_7_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_7_6() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1>
CallableOnce_7_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableOnce_7_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1>
class CallableMany_7_6 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1);

  CallableMany_7_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableMany_7_6() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1>
CallableMany_7_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableMany_7_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7>
class CallableOnce_7_7 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7);

  CallableOnce_7_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableOnce_7_7() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7>
class CallableOnce_7_7<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7);

  CallableOnce_7_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableOnce_7_7() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7>
CallableOnce_7_7<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7) {
  return new CallableOnce_7_7<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7>
class CallableMany_7_7 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7);

  CallableMany_7_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableMany_7_7() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7>
CallableMany_7_7<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7) {
  return new CallableMany_7_7<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7);
}
template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
class CallableOnce_8_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);

  CallableOnce_8_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_8_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8) {
    Res ret = ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
class CallableOnce_8_0<Target, void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8> {

public:
  typedef void(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);

  CallableOnce_8_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableOnce_8_0() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8) {
    ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
CallableOnce_8_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>*
MakeCallableOnce(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8),
    Target* obj) {
  return new CallableOnce_8_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>(
    f,
    obj);
}

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
class CallableMany_8_0 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8> {

public:
  typedef Res(Target::*TargetFunc)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);

  CallableMany_8_0(TargetFunc target_func,
    Target* obj)
    : target_func_(target_func),
      obj_(obj) { }

  virtual ~CallableMany_8_0() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8) {
    return ((*obj_).*target_func_)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here

};

template<typename Target, typename Res, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
CallableMany_8_0<Target, Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>*
MakeCallableMany(
    Res (Target::*f)(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8),
    Target* obj) {
  return new CallableMany_8_0<Target,Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>(
    f,
    obj);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableOnce_8_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableOnce_8_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_8_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    Res ret = ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableOnce_8_1<Target, void, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableOnce_8_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableOnce_8_1() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
CallableOnce_8_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7),
    Target* obj,
    Bind1 bind1) {
  return new CallableOnce_8_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class CallableMany_8_1 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

  CallableMany_8_1(TargetFunc target_func,
    Target* obj,
    Bind1 bind1)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1) { }

  virtual ~CallableMany_8_1() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) {
    return ((*obj_).*target_func_)(bind1_, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
};

template<typename Target, typename Res, typename Bind1, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
CallableMany_8_1<Target, Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7),
    Target* obj,
    Bind1 bind1) {
  return new CallableMany_8_1<Target,Res, Bind1, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>(
    f,
    obj,
    bind1);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_8_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_8_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_8_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableOnce_8_2<Target, void, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableOnce_8_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableOnce_8_2() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5, arg6);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableOnce_8_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableOnce_8_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class CallableMany_8_2 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

  CallableMany_8_2(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2) { }

  virtual ~CallableMany_8_2() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    return ((*obj_).*target_func_)(bind1_, bind2_, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
CallableMany_8_2<Target, Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2) {
  return new CallableMany_8_2<Target,Res, Bind1, Bind2, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>(
    f,
    obj,
    bind1,
    bind2);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_8_3 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_8_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_8_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4, arg5);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableOnce_8_3<Target, void, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableOnce_8_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableOnce_8_3() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4, arg5);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableOnce_8_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableOnce_8_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class CallableMany_8_3 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4, Arg5> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5);

  CallableMany_8_3(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3) { }

  virtual ~CallableMany_8_3() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, arg1, arg2, arg3, arg4, arg5);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
CallableMany_8_3<Target, Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3) {
  return new CallableMany_8_3<Target,Res, Bind1, Bind2, Bind3, Arg1, Arg2, Arg3, Arg4, Arg5>(
    f,
    obj,
    bind1,
    bind2,
    bind3);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_8_4 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_8_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_8_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3, arg4);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableOnce_8_4<Target, void, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4> :
  public Callback<void, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4);

  CallableOnce_8_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableOnce_8_4() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3, arg4);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableOnce_8_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableOnce_8_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class CallableMany_8_4 :
  public Callback<Res, Arg1, Arg2, Arg3, Arg4> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4);

  CallableMany_8_4(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4) { }

  virtual ~CallableMany_8_4() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, arg1, arg2, arg3, arg4);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
CallableMany_8_4<Target, Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4) {
  return new CallableMany_8_4<Target,Res, Bind1, Bind2, Bind3, Bind4, Arg1, Arg2, Arg3, Arg4>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_8_5 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3);

  CallableOnce_8_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_8_5() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2, arg3);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2, typename Arg3>
class CallableOnce_8_5<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3> :
  public Callback<void, Arg1, Arg2, Arg3> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3);

  CallableOnce_8_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableOnce_8_5() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2, arg3);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2, typename Arg3>
CallableOnce_8_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableOnce_8_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2, typename Arg3>
class CallableMany_8_5 :
  public Callback<Res, Arg1, Arg2, Arg3> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3);

  CallableMany_8_5(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5) { }

  virtual ~CallableMany_8_5() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, arg1, arg2, arg3);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Arg1, typename Arg2, typename Arg3>
CallableMany_8_5<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5) {
  return new CallableMany_8_5<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Arg1, Arg2, Arg3>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1, typename Arg2>
class CallableOnce_8_6 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2);

  CallableOnce_8_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_8_6() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1, arg2);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1, typename Arg2>
class CallableOnce_8_6<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2> :
  public Callback<void, Arg1, Arg2> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2);

  CallableOnce_8_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableOnce_8_6() {}

  virtual void operator()(Arg1 arg1, Arg2 arg2) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1, arg2);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1, typename Arg2>
CallableOnce_8_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableOnce_8_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1, typename Arg2>
class CallableMany_8_6 :
  public Callback<Res, Arg1, Arg2> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2);

  CallableMany_8_6(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6) { }

  virtual ~CallableMany_8_6() {}

  virtual Res operator()(Arg1 arg1, Arg2 arg2) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, arg1, arg2);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Arg1, typename Arg2>
CallableMany_8_6<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6) {
  return new CallableMany_8_6<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Arg1, Arg2>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Arg1>
class CallableOnce_8_7 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1);

  CallableOnce_8_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableOnce_8_7() {}

  virtual Res operator()(Arg1 arg1) {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, arg1);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Arg1>
class CallableOnce_8_7<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1> :
  public Callback<void, Arg1> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1);

  CallableOnce_8_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableOnce_8_7() {}

  virtual void operator()(Arg1 arg1) {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, arg1);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Arg1>
CallableOnce_8_7<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7) {
  return new CallableOnce_8_7<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Arg1>
class CallableMany_8_7 :
  public Callback<Res, Arg1> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1);

  CallableMany_8_7(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7) { }

  virtual ~CallableMany_8_7() {}

  virtual Res operator()(Arg1 arg1) {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, arg1);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Arg1>
CallableMany_8_7<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7) {
  return new CallableMany_8_7<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Arg1>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Bind8>
class CallableOnce_8_8 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8);

  CallableOnce_8_8(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7,
    Bind8 bind8)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7),
      bind8_(bind8) { }

  virtual ~CallableOnce_8_8() {}

  virtual Res operator()() {
    Res ret = ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, bind8_);
    delete this;
    return ret;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
  Bind8 bind8_;
};

template<typename Target, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Bind8>
class CallableOnce_8_8<Target, void, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8> :
  public Callback<void> {

public:
  typedef void(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8);

  CallableOnce_8_8(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7,
    Bind8 bind8)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7),
      bind8_(bind8) { }

  virtual ~CallableOnce_8_8() {}

  virtual void operator()() {
    ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, bind8_);
    delete this;
  }

  virtual bool once() const {
    return true;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
  Bind8 bind8_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Bind8>
CallableOnce_8_8<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8>*
MakeCallableOnce(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7,
    Bind8 bind8) {
  return new CallableOnce_8_8<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7,
    bind8);
}

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Bind8>
class CallableMany_8_8 :
  public Callback<Res> {

public:
  typedef Res(Target::*TargetFunc)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8);

  CallableMany_8_8(TargetFunc target_func,
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7,
    Bind8 bind8)
    : target_func_(target_func),
      obj_(obj),
      bind1_(bind1),
      bind2_(bind2),
      bind3_(bind3),
      bind4_(bind4),
      bind5_(bind5),
      bind6_(bind6),
      bind7_(bind7),
      bind8_(bind8) { }

  virtual ~CallableMany_8_8() {}

  virtual Res operator()() {
    return ((*obj_).*target_func_)(bind1_, bind2_, bind3_, bind4_, bind5_, bind6_, bind7_, bind8_);
  }

  virtual bool once() const {
    return false;
  }

private:
  TargetFunc target_func_; // not owned here
  Target* obj_;            // not owned here
  Bind1 bind1_;
  Bind2 bind2_;
  Bind3 bind3_;
  Bind4 bind4_;
  Bind5 bind5_;
  Bind6 bind6_;
  Bind7 bind7_;
  Bind8 bind8_;
};

template<typename Target, typename Res, typename Bind1, typename Bind2, typename Bind3, typename Bind4, typename Bind5, typename Bind6, typename Bind7, typename Bind8>
CallableMany_8_8<Target, Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8>*
MakeCallableMany(
    Res (Target::*f)(Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8),
    Target* obj,
    Bind1 bind1,
    Bind2 bind2,
    Bind3 bind3,
    Bind4 bind4,
    Bind5 bind5,
    Bind6 bind6,
    Bind7 bind7,
    Bind8 bind8) {
  return new CallableMany_8_8<Target,Res, Bind1, Bind2, Bind3, Bind4, Bind5, Bind6, Bind7, Bind8>(
    f,
    obj,
    bind1,
    bind2,
    bind3,
    bind4,
    bind5,
    bind6,
    bind7,
    bind8);
}
};  // namespace threading
};  // namespace jtil
